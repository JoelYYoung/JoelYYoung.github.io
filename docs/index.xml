<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joel Yang</title><link>https://joelyyoung.github.io/</link><description>Recent content on Joel Yang</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 21 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://joelyyoung.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Static Program Analysis Reading Note: Chapter 6</title><link>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter6/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter6/</guid><description>&lt;h1 id="static-program-analysis-reading-note-chapter-6">Static Program Analysis Reading Note: Chapter 6&lt;/h1>
&lt;h2 id="why-need-widening">Why Need &lt;em>Widening&lt;/em>?&lt;/h2>
&lt;p>&lt;strong>Recap&lt;/strong>: In Chapter 5, we introduced &lt;em>Iterative Algorithm&lt;/em> and &lt;em>Worklist Algorithm&lt;/em> to calculate the $lfp$ of the given constraint (for &lt;em>May Analysis&lt;/em>). The correctness of the mentioned algorithm demands that the lattice has &lt;strong>limited height&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Problem&lt;/strong>: What happens if the lattice has infinit height? E.g., in interval analysis, we use ${[l,u]|l,u \in N }$ as the lattice, which has infinit height.&lt;/p></description></item><item><title>Static Program Analysis Reading Note: Chapter 5</title><link>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter5/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter5/</guid><description>&lt;h1 id="static-program-analysis-reading-note-chapter-5">Static Program Analysis Reading Note: Chapter 5&lt;/h1>
&lt;h2 id="brief">Brief&lt;/h2>
&lt;p>&lt;em>&lt;strong>Recap&lt;/strong>&lt;/em> How do we build a constraint system for a given program (CFG)?&lt;/p>
&lt;p>We firstly define a &lt;em>states&lt;/em> variable $[v]$ for each CFG vertex $v$, and we then generate constraints between those &lt;em>states&lt;/em> variables, usually between neighboring vertexes, according to dataflow relations represented by the CFG and the programming language. Note that those constraints could be &lt;em>equations&lt;/em> or &lt;em>inequations&lt;/em>, and the latter could be transformed into &lt;em>equations&lt;/em>.&lt;/p></description></item><item><title>Static Program Analysis Reading Note: Chapter 4</title><link>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter4/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/static-program-analysis-reading-note-chapter4/</guid><description>&lt;h1 id="static-program-analysis-reading-note-chapter-4">Static Program Analysis Reading Note: Chapter 4&lt;/h1>
&lt;h2 id="basic-math-languages">Basic Math Languages&lt;/h2>
&lt;p>&lt;strong>Def &lt;em>partial order set (poset)&lt;/em>&lt;/strong>: A pair $(S,R)$. $S$ is a set; $R$ (also denoted as $\sqsubseteq$) is a &lt;em>binary relation&lt;/em> on $S$ that satisfies the following rules:&lt;/p>
&lt;ul>
&lt;li>reflexivity: $\forall x \in S, x \sqsubseteq x$.&lt;/li>
&lt;li>transitivity: $\forall x,y,z \in S, x \sqsubseteq y \wedge y \sqsubseteq z \rightarrow x \sqsubseteq z$.&lt;/li>
&lt;li>anti-symmetry: $ \forall x, y \in S, x \sqsubseteq y \wedge y \sqsubseteq x \rightarrow x=y $&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: If we use the terminology &lt;em>partial order relation&lt;/em>, we usually denote $R$ instead of $(S,R)$.&lt;/p></description></item><item><title>CS251 Introduction: What is Computer Science?</title><link>https://joelyyoung.github.io/cs251-introduction-what-is-computer-science/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/cs251-introduction-what-is-computer-science/</guid><description>&lt;blockquote>
&lt;p>Computer Science is no more about computers than astronomy is about telescopes.&lt;/p>
&lt;p>&amp;ndash; &lt;cite>&lt;strong>Edsger Wybe Dijkstra&lt;/strong>&lt;/cite>&lt;/p>&lt;/blockquote>
&lt;h1 id="what-about-mathematics">What about Mathematics?&lt;/h1>
&lt;p>Before diving into the question of &lt;em>what is computer science&lt;/em>, let&amp;rsquo;s deal with the question of &lt;em>what is mathematics&lt;/em> first. Obviously it is a big question that no one would ever be confident to answer to. However, I still want to share some of my ideas of &lt;em>what mathematics is&lt;/em>.&lt;/p></description></item><item><title>CMU CS251 Great Ideas in Theoretical CS: Study Note 1</title><link>https://joelyyoung.github.io/cmu-cs251-great-ideas-in-theoretical/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/cmu-cs251-great-ideas-in-theoretical/</guid><description>&lt;h1 id="abstract">Abstract&lt;/h1>
&lt;p>I just walked through the Stanford CS103 course&amp;rsquo;s major slides and tried to fix some confusions of &lt;em>Automaton&lt;/em> and &lt;em>Turing Machine&lt;/em> in such a &lt;em>fulgural&lt;/em> way. However, I found that I still felt not clear enough of come key ideas, so I guess maybe this is not a effective way to study something so &lt;em>tough&lt;/em> like &lt;em>Theory of Computing&lt;/em>. Therefore, I plan to relearn this content &lt;strong>as a course&lt;/strong>, i.e., listening to vedios, taking notes, doing practices and assignments, and joining in some discussions.&lt;/p></description></item><item><title>Methematical Fundations of Computing: Study Note of CS103</title><link>https://joelyyoung.github.io/methematical-fundations-of-computing-study-note/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/methematical-fundations-of-computing-study-note/</guid><description>&lt;h1 id="abstract">Abstract&lt;/h1>
&lt;p>&lt;strong>Keywords&lt;/strong>: Computing Model, Finite Automata (FA or DFA), Undeterministic Finite Automata (UFA), Problem, Decision Problem, Function Problem, Turing Machine (TM), Language, Recognizable Language, Regular Language, Decidable Language&lt;/p>
&lt;p>Above are the major topic that will be talked in this artical. And this artical is basically a digest of &lt;a href="https://web.stanford.edu/class/archive/cs/cs103/cs103.1134/">Stanford CS103&lt;/a> course slides, which ignores the proof of some conclusion and detailed explainations of some ideas, but just lists the critical conclusions and notions that are helpful for understanding Static Program Analysis.&lt;/p></description></item><item><title>How to Use Hugo and GitHub Pages to Build Personal Blog</title><link>https://joelyyoung.github.io/how-to-use-hugo-and-github-pages/</link><pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/how-to-use-hugo-and-github-pages/</guid><description>&lt;h1 id="my-needs">My Needs&lt;/h1>
&lt;p>I want to build a personal academic blog, which should contain:&lt;/p>
&lt;ul>
&lt;li>A simple bio page that lists my CV, and publications.&lt;/li>
&lt;li>Pages of my blog articals, like technique articals and reading notes etc.&lt;/li>
&lt;li>&lt;strong>Catagory&lt;/strong> and &lt;strong>tag&lt;/strong> system to help me organize my published blog articals.&lt;/li>
&lt;/ul>
&lt;h1 id="hugo--github-pages--perfect-solution">Hugo + Github Pages = Perfect Solution&lt;/h1>
&lt;h2 id="step1-install-hugo">Step1: Install Hugo&lt;/h2>
&lt;p>Follow the &lt;a href="https://gohugo.io/installation/">Tutorial of Installation&lt;/a> is enough. It provides 4 optional ways to install Hugo on Windows: downloading prebuilt binaries, use Chocolatey package manager, use docker image and run in docker, and build from source. And I choosed to download the prebuilt binary file.&lt;/p></description></item><item><title>Static Program Analysis Reading Note: Introduction</title><link>https://joelyyoung.github.io/static-program-analysis-reading-note-introduction/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/static-program-analysis-reading-note-introduction/</guid><description>&lt;h1 id="target-of-spa">Target of SPA&lt;/h1>
&lt;p>&lt;em>&lt;strong>Target 1&lt;/strong>&lt;/em>: To answer any none-trivial questions of a program at given &lt;em>program point&lt;/em>, e.g.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Whether&lt;/strong> the judgement that &lt;code>x &amp;gt; const&lt;/code> always true, i.e., invariant.&lt;/li>
&lt;li>&lt;strong>What&lt;/strong> is the possible range of a number x?&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Target 2&lt;/strong>&lt;/em>: To answer any questions of a program, e.g.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>How&lt;/strong> much memory could the program consume?&lt;/li>
&lt;li>&lt;strong>Whether&lt;/strong> the program terminates on all legal inputs?&lt;/li>
&lt;/ul>
&lt;p>They concerns both &amp;ldquo;yes-or-no&amp;rdquo; questions and more general questions. As to two typical problems, &lt;em>bug detecting&lt;/em> and &lt;em>program verification&lt;/em>, we can sovle them by reducing to a basic questions: &amp;ldquo;is each statement error free?&amp;rdquo;.&lt;/p></description></item><item><title>Static Program Analysis Thought: path conditions</title><link>https://joelyyoung.github.io/static-program-analysis-thought-path-conditions/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/static-program-analysis-thought-path-conditions/</guid><description>&lt;h1 id="path-conditions">Path Conditions&lt;/h1>
&lt;h2 id="brief">Brief&lt;/h2>
&lt;p>In this artical, I give the formal statement of handling path conditions.&lt;/p></description></item><item><title>The actor is a gander</title><link>https://joelyyoung.github.io/demopage/the-actor-is-a-gander/</link><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid>https://joelyyoung.github.io/demopage/the-actor-is-a-gander/</guid><description>&lt;p>However, a frostless stop is a stream of the mind. The actor is a gander. A
garni person without &lt;a href="https://en.wikipedia.org/wiki/Gorilla">gorillas&lt;/a> is truly
a vest of scentless plots.&lt;/p>
&lt;p>Some assert that the snowflakes could be said to resemble unclaimed directions.
The sponge is a boat. Authors often misinterpret the inventory as an absurd
sock, when in actuality it feels more like a plumbous
&lt;a href="https://en.wikipedia.org/wiki/Soil">earth&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Now residence dashwoods she excellent you. Shade being under his bed her. Much
read on as draw. Blessing for ignorant exercise any yourself unpacked.
Pleasant horrible but confined day end marriage. Eagerness furniture set
preserved far recommend. Did even but nor are most gave hope. Secure active
living depend son repair day ladies now.&lt;/p></description></item></channel></rss>